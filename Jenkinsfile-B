pipeline {
    agent any
    
    stages {
        stage('Get Code') {
            steps {
                git branch: 'feature_fix_coverage', url: 'https://github.com/rubenpio/helloworld.git'
            }
        }
        stage ('Unit') {
            steps {
                 bat '''
                    set PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-unit.xml test\\unit
                '''
            }
        }
        stage ('Rest') {
            steps {
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start flask run
                    start java -jar "D:\\Devops & Cloud\\wiremock-standalone-3.3.1.jar" --port 9090 --root-dir "D:\\Devops & Cloud\\helloworld\\test\\wiremock"
                    pytest --junitxml=result-rest.xml test\\rest
                '''
                junit 'result*.xml'
            }
        }
        stage ('Static') {
            steps {
                bat '''
                     flake8 --format=pylint --exit-zero app >flake8.out
                    '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold:
                8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }
        stage ('Security') {
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}, {severity}] {msg}""
                    type bandit.out
                '''
               recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }
        stage ('Cobertura') {
             steps {
                bat '''
                    coverage run --branch --source=app --omit=app\\_init_.py,app\\api.py -m pytest test\\unit 
                    coverage xml
                    '''
                cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95', failUnstable: false
            }
    }
        
        stage ('Performance') {
            steps {
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start flask run
                    C:\\Users\\ruben\\Downloads\\apache-jmeter-5.6.2\\apache-jmeter-5.6.2\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                    '''
                perfReport sourceDataFiles: 'flask.jtl'

            }
        }
    }
}
